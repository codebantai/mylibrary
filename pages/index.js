import Head from 'next/head'
import { useEffect, useState } from 'react'
import { createRole } from '@/services/roles.service'
import { createBook, getBooks, getCategories } from '@/services/books.service'
import Landing from "@/components/Landing";
import Admin from "@/components/Admin";

export default function Home({ categoriesData }) {
  const [form, setForm] = useState({
    role: ''
  });
  const [categories, setCategories] = useState([{ label: 'All Categories', value: 0 } , ...(categoriesData ?? [])]);
  const [search, setSearch] = useState('');
  const [searchCategory, setSearchCategory] = useState({ label: 'All Categories', value: 0 });
  const [pagination, setPagination] = useState({
    skip: 0,
    take: 10
  });
  const [books, setBooks] = useState([])

  const fetchBooks = async () => {
    const { skip, take } = pagination;
    const booksResponse = await getBooks({
      skip,
      take,
      categoryId: searchCategory?.value === 0 ? null : searchCategory?.value ?? null,
      search
    });
    if (booksResponse) {
      setBooks(booksResponse.data)
    }
  }

  useEffect(() => {
    fetchBooks()
  }, [searchCategory, search, pagination])


  return (
    <div className=' to-black h-screen'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    <main className='w-full flex justify-center items-center  to-black'>
      <Landing
        books={books}
        setPagination={setPagination}
        search={search}
        searchCategory={searchCategory}
        setSearchCategory={setSearchCategory}
        setSearch={setSearch}
        pagination={pagination}
        categories={categories} />

        </main>
    </div>
  );
}

export async function getServerSideProps({ req: { cookies }, resolvedUrl }) {

  const categoriesResponse = await getCategories();
  if (categoriesResponse?.status) {
    return { props: { categoriesData: categoriesResponse.data.map(category => Object.assign({}, { label: category.name, value: category.id })) } }
  } else {
    return { props: {} }
  }
}

