import Head from 'next/head'
import { useEffect, useState } from 'react'
import { createBook, getBooks, getCategories,updateBook } from '@/services/books.service'
import Landing from "@/components/Landing";
import { showNotification } from 'hooks/useToaster';

export default function Home({ categoriesData }) {
  const [categories, setCategories] = useState([{ label: 'All Categories', value: 0 }, ...(categoriesData ?? [])]);
  const [search, setSearch] = useState('');
  const [searchCategory, setSearchCategory] = useState({ label: 'All Categories', value: 0 });
  const [pagination, setPagination] = useState({
    skip: 0,
    take: 10
  });
  const [books, setBooks] = useState([])
  const [loading, setLoading] = useState(false);
  const [toggleLoading,setToggleLoading] = useState(false);
  const fetchBooks = async () => {
    const { skip, take } = pagination;
    setLoading(true)
    const booksResponse = await getBooks({
      skip,
      take,
      categoryId: searchCategory?.value === 0 ? null : searchCategory?.value ?? null,
      search
    });
    setLoading(false)
    if (booksResponse) {
      setBooks(booksResponse.data)
    }
  }

  useEffect(() => {
    fetchBooks()
  }, [searchCategory, search, pagination]);

  const handleBookAvaliable = async (e, bookId) => {
    if(!bookId) return;
    const {checked} = e.target;
    setToggleLoading(true)
    const res = await updateBook({bookId, data : { available: checked }})
    
    if(res.status) {
      setBooks([books[0], books[1].map(book => {
        if (book.id === bookId) {
          Object.assign(book, { available: checked })
        }
        return book
      })])
      showNotification('Successfully updated',{
        type:'success'
      })
    }
    setToggleLoading(false)
}


return (
  <div className=' '>
    <Head>
      <title>My Library</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <main className='w-full flex justify-center items-center  to-black'>
      <Landing
        loading={loading}
        books={books}
        setPagination={setPagination}
        search={search}
        searchCategory={searchCategory}
        setSearchCategory={setSearchCategory}
        setSearch={setSearch}
        pagination={pagination}
        categories={categories}
        handleBookAvaliable={handleBookAvaliable}
        toggleLoading={toggleLoading}
      />
    </main>
  </div>
);
}

export async function getServerSideProps({ req: { cookies, headers }, resolvedUrl }) {

  const categoriesResponse = await getCategories();

  if (categoriesResponse?.status) {
    return { props: { categoriesData: categoriesResponse.data.map(category => Object.assign({}, { label: category.name, value: category.id })) } }
  } else {
    return { props: {} }
  }
}

